// demo2 : load image and swc
#include <iostream>
#include <string>
#include <fstream>

using namespace std;

void produce_demo2(string dir, string visiocyte_path, string plugin_name, string menu_name, string func_name)
{
	ofstream ofs;
	string filename;

	filename = dir + "/" + plugin_name + ".pro";
	cout<<"output "<<filename<<endl;

	ofs.open((char*)filename.c_str());
	ofs<<"TEMPLATE    = lib"<<endl;
	ofs<<"CONFIG  += debug qt plugin warn_off"<<endl;
	ofs<<"#CONFIG += x86_64"<<endl;
	ofs<<""<<endl;
	ofs<<"VISIOCYTEPATH = /Users/xiaoh10/work/visiocyte_external"<<endl;
	ofs<<"INCLUDEPATH += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun "<<endl;
	ofs<<"INClUDEPATH += $$VISIOCYTEPATH/visiocyte_main/common_lib/include"<<endl;
	ofs<<""<<endl;
	ofs<<"LIBS += -L. -lvisiocytetiff -L$$VISIOCYTEPATH/visiocyte_main/common_lib/lib"<<endl;
	ofs<<""<<endl;
	ofs<<"HEADERS =  "<<plugin_name<<"_plugin.h"<<endl;
	ofs<<"HEADERS += "<<plugin_name<<"_func.h"<<endl;
	ofs<<""<<endl;
	ofs<<"SOURCES = "<<plugin_name<<"_plugin.cpp"<<endl;
	ofs<<"SOURCES += "<<plugin_name<<"_func.cpp"<<endl;
	ofs<<""<<endl;
	ofs<<"HEADERS += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun/basic_memory.h"<<endl;
	ofs<<"HEADERS += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun/stackutil.h"<<endl;
	ofs<<"HEADERS += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun/mg_utilities.h"<<endl;
	ofs<<"HEADERS += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun/mg_image_lib.h"<<endl;
	ofs<<"HEADERS += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun/basic_surf_objs.h"<<endl;
	ofs<<""<<endl;
	ofs<<"# put all visiocyte related cpp file in the end !!!"<<endl;
	ofs<<""<<endl;
	ofs<<"SOURCES += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun/visiocyte_message.cpp"<<endl;
	ofs<<"SOURCES += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun/basic_memory.cpp"<<endl;
	ofs<<"SOURCES += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun/stackutil.cpp"<<endl;
	ofs<<"SOURCES += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun/mg_utilities.cpp"<<endl;
	ofs<<"SOURCES += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun/mg_image_lib.cpp"<<endl;
	ofs<<"SOURCES += $$VISIOCYTEPATH/visiocyte_main/basic_c_fun/basic_surf_objs.cpp"<<endl;
	ofs<<""<<endl;
	ofs<<"TARGET  = $$qtLibraryTarget("<<plugin_name<<")"<<endl;
	ofs<<"DESTDIR = $$VISIOCYTEPATH/bin/plugins/"<<plugin_name<<""<<endl;
	ofs.close();

	filename = dir + "/" + plugin_name + "_func.cpp";
	cout<<"output "<<filename<<endl;

	ofs.open((char*)filename.c_str());
	ofs<<"/* "<<plugin_name<<"_func.cpp"<<endl;
	ofs<<" * This plugin will load image and swc in domenu and dofunc"<<endl;
	ofs<<" * 2012-02-21 : by Hang Xiao"<<endl;
	ofs<<" */"<<endl;
	ofs<<""<<endl;
	ofs<<"#include <vector>"<<endl;
	ofs<<"#include <iostream>"<<endl;
	ofs<<""<<endl;
	ofs<<"#include <visiocyte_interface.h>"<<endl;
	ofs<<"#include \"visiocyte_message.h\""<<endl;
	ofs<<""<<endl;
	ofs<<"#include \"basic_surf_objs.h\""<<endl;
	ofs<<"#include \"stackutil.h\""<<endl;
	ofs<<""<<endl;
	ofs<<"#include \""<<plugin_name<<"_func.h\""<<endl;
	ofs<<""<<endl;
	ofs<<"using namespace std;"<<endl;
	ofs<<""<<endl;
	ofs<<"const QString title = QObject::tr(\"Load Image And SWC\");"<<endl;
	ofs<<""<<endl;
	ofs<<"#define GET_CURRENT_IMAGE_AND_SWC(inimg1d, in_sz, nt) \\"<<endl;
	ofs<<"{\\"<<endl;
	ofs<<"	visiocytehandle curwin = callback.currentImageWindow(); \\"<<endl;
	ofs<<"	Image4DSimple *p4DImage = callback.getImage(curwin); \\"<<endl;
	ofs<<"	nt = callback.getSWC(curwin);\\"<<endl;
	ofs<<"	inimg1d = p4DImage->getRawData();\\"<<endl;
	ofs<<"	in_sz = new VISIOCYTELONG[4]; \\"<<endl;
	ofs<<"	in_sz[0] = p4DImage->getXDim(); \\"<<endl;
	ofs<<"	in_sz[1] = p4DImage->getYDim();\\"<<endl;
	ofs<<"	in_sz[2] = p4DImage->getZDim();\\"<<endl;
	ofs<<"	in_sz[3] = p4DImage->getCDim();\\"<<endl;
	ofs<<"	ImagePixelType datatype = p4DImage->getDatatype();\\"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"#define SHOW_OUT_IMAGE_AND_SWC(outimg1d, out_sz, nt, title) \\"<<endl;
	ofs<<"{\\"<<endl;
	ofs<<"	Image4DSimple * p4DImage = new Image4DSimple();\\"<<endl;
	ofs<<"	p4DImage->setData(outimg1d, out_sz[0], out_sz[1], out_sz[2], out_sz[3], VISIOCYTE_UINT8);\\"<<endl;
	ofs<<"	visiocytehandle newwin = callback.newImageWindow();\\"<<endl;
	ofs<<"	callback.setImage(newwin, p4DImage);\\"<<endl;
	ofs<<"	callback.setImageName(newwin, QObject::tr(title));\\"<<endl;
	ofs<<"	callback.setSWC(newwin, nt);\\"<<endl;
	ofs<<"	callback.open3DWindow(newwin);\\"<<endl;
	ofs<<"	callback.getView3DControl(newwin)->updateWithTriView();\\"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"string file_type(string para)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	int pos = para.find_last_of(\".\");"<<endl;
	ofs<<"	if(pos == string::npos) return string(\"\");"<<endl;
	ofs<<"	else return para.substr(pos, para.size() - pos);"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"int "<<func_name<<"(VISIOCYTEPluginCallback2 &callback, QWidget *parent)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	if(callback.getImageWindowList().empty()) return QMessageBox::information(0, title, QObject::tr(\"No image is open.\"));"<<endl;
	ofs<<""<<endl;
	ofs<<"	unsigned char * inimg1d = 0; "<<endl;
	ofs<<"	VISIOCYTELONG * in_sz = 0;"<<endl;
	ofs<<"	NeuronTree nt;"<<endl;
	ofs<<""<<endl;
	ofs<<"	GET_CURRENT_IMAGE_AND_SWC(inimg1d, in_sz, nt);"<<endl;
	ofs<<""<<endl;
	ofs<<"	// please use other pointer here instead inimg1d, this will cause memory problem"<<endl;
	ofs<<"	SHOW_OUT_IMAGE_AND_SWC(inimg1d, in_sz, nt, \"SWC COPY\");"<<endl;
	ofs<<""<<endl;
	ofs<<"	return 1;"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"#define READ_IMAGE_AND_SWC_FROM_INPUT(inimg1d, in_sz, nt) \\"<<endl;
	ofs<<"{\\"<<endl;
	ofs<<"	if(input.empty()) return false;\\"<<endl;
	ofs<<"	vector<char*> in_str = *((vector<char*> *)(input.at(0).p));\\"<<endl;
	ofs<<"	if(in_str.size() < 2){cerr<<\"Error: no enough input.\"<<endl; return false;}\\"<<endl;
	ofs<<"	string inimg_file, inswc_file;\\"<<endl;
	ofs<<"	string ftp1 = file_type(in_str[0]);\\"<<endl;
	ofs<<"	string ftp2 = file_type(in_str[1]);\\"<<endl;
	ofs<<"	if(ftp1 == \".raw\" || ftp1 == \".tif\" || ftp1 == \".tiff\" || ftp1 == \".lsm\") inimg_file = in_str[0];\\"<<endl;
	ofs<<"	else {if(ftp1 == \".swc\") inswc_file = in_str[0];}\\"<<endl;
	ofs<<"	if(ftp2 == \".raw\" || ftp2 == \".tif\" || ftp2 == \".tiff\" || ftp2 == \".lsm\") inimg_file = in_str[1];\\"<<endl;
	ofs<<"	else {if(ftp2 == \".swc\") inswc_file = in_str[1];}\\"<<endl;
	ofs<<"	if(inimg_file == \"\" || inswc_file == \"\") {cerr<<\"Error : either image file or swc file is missing.\"<<endl; return false;}\\"<<endl;
	ofs<<"	int datatype;\\"<<endl;
	ofs<<"	loadImage((char*) inimg_file.c_str(), inimg1d, in_sz, datatype);\\"<<endl;
	ofs<<"	nt = readSWC_file((char*)inswc_file.c_str());\\"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"bool "<<func_name<<"(const VISIOCYTEPluginArgList & input, VISIOCYTEPluginArgList & output)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	unsigned char * inimg1d = 0;"<<endl;
	ofs<<"	VISIOCYTELONG * in_sz = 0;"<<endl;
	ofs<<"	NeuronTree nt;"<<endl;
	ofs<<""<<endl;
	ofs<<"	READ_IMAGE_AND_SWC_FROM_INPUT(inimg1d, in_sz, nt);"<<endl;
	ofs<<""<<endl;
	ofs<<"	cout<<\"in_sz[0] = \"<<in_sz[0]<<endl;"<<endl;
	ofs<<"	cout<<\"in_sz[1] = \"<<in_sz[1]<<endl;"<<endl;
	ofs<<"	cout<<\"in_sz[2] = \"<<in_sz[2]<<endl;"<<endl;
	ofs<<"	cout<<\"in_sz[3] = \"<<in_sz[3]<<endl;"<<endl;
	ofs<<"	cout<<\"nt.listNeuron.size() = \"<<nt.listNeuron.size()<<endl;"<<endl;
	ofs<<"	return true;"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs.close();

	filename = dir + "/" + plugin_name + "_func.h";
	cout<<"output "<<filename<<endl;

	ofs.open((char*)filename.c_str());
	ofs<<"/* "<<plugin_name<<"_func.h"<<endl;
	ofs<<" * This plugin will load image and swc in domenu and dofunc"<<endl;
	ofs<<" * 2012-02-21 : by Hang Xiao"<<endl;
	ofs<<" */"<<endl;
	ofs<<" "<<endl;
	ofs<<"#ifndef __"<<plugin_name<<"_FUNC_H__"<<endl;
	ofs<<"#define __"<<plugin_name<<"_FUNC_H__"<<endl;
	ofs<<""<<endl;
	ofs<<"#include <visiocyte_interface.h>"<<endl;
	ofs<<""<<endl;
	ofs<<"int "<<func_name<<"(VISIOCYTEPluginCallback2 &callback, QWidget *parent);"<<endl;
	ofs<<"bool "<<func_name<<"(const VISIOCYTEPluginArgList & input, VISIOCYTEPluginArgList & output);"<<endl;
	ofs<<""<<endl;
	ofs<<"#endif"<<endl;
	ofs<<""<<endl;
	ofs.close();

	filename = dir + "/" + plugin_name + "_plugin.cpp";
	cout<<"output "<<filename<<endl;

	ofs.open((char*)filename.c_str());
	ofs<<"/* "<<plugin_name<<"_plugin.cpp"<<endl;
	ofs<<" * This plugin will load image and swc in domenu and dofunc"<<endl;
	ofs<<" * 2012-02-21 : by Hang Xiao"<<endl;
	ofs<<" */"<<endl;
	ofs<<" "<<endl;
	ofs<<"#include \"visiocyte_message.h\""<<endl;
	ofs<<""<<endl;
	ofs<<"#include \""<<plugin_name<<"_plugin.h\""<<endl;
	ofs<<"#include \""<<plugin_name<<"_func.h\""<<endl;
	ofs<<" "<<endl;
	ofs<<"Q_EXPORT_PLUGIN2("<<plugin_name<<", LoadImageAndSWCPlugin);"<<endl;
	ofs<<" "<<endl;
	ofs<<"QStringList LoadImageAndSWCPlugin::menulist() const"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	return QStringList() "<<endl;
	ofs<<"		<<tr(\""<<menu_name<<"\")"<<endl;
	ofs<<"		<<tr(\"about\");"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"QStringList LoadImageAndSWCPlugin::funclist() const"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	return QStringList()"<<endl;
	ofs<<"		<<tr(\""<<func_name<<"\");"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"void LoadImageAndSWCPlugin::domenu(const QString &menu_name, VISIOCYTEPluginCallback2 &callback, QWidget *parent)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	if (menu_name == tr(\""<<menu_name<<"\"))"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		"<<func_name<<"(callback,parent);"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"	else"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		visiocyte_msg(tr(\"This plugin will load image and swc in domenu and dofunc. \""<<endl;
	ofs<<"			\"Developed by Hang Xiao, 2012-02-21\"));"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs<<"bool LoadImageAndSWCPlugin::dofunc(const QString & func_name, const VISIOCYTEPluginArgList & input, VISIOCYTEPluginArgList & output, VISIOCYTEPluginCallback2 & callback,  QWidget * parent)"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	if (func_name == tr(\""<<func_name<<"\"))"<<endl;
	ofs<<"	{"<<endl;
	ofs<<"		return "<<func_name<<"(input, output);"<<endl;
	ofs<<"	}"<<endl;
	ofs<<"}"<<endl;
	ofs<<""<<endl;
	ofs.close();

	filename = dir + "/" + plugin_name + "_plugin.h";
	cout<<"output "<<filename<<endl;

	ofs.open((char*)filename.c_str());
	ofs<<"/* "<<plugin_name<<"_plugin.h"<<endl;
	ofs<<" * This plugin will load image and swc in domenu and dofunc"<<endl;
	ofs<<" * 2012-02-21 : by Hang Xiao"<<endl;
	ofs<<" */"<<endl;
	ofs<<" "<<endl;
	ofs<<"#ifndef __"<<plugin_name<<"_PLUGIN_H__"<<endl;
	ofs<<"#define __"<<plugin_name<<"_PLUGIN_H__"<<endl;
	ofs<<""<<endl;
	ofs<<"#include <QtGui>"<<endl;
	ofs<<"#include <visiocyte_interface.h>"<<endl;
	ofs<<""<<endl;
	ofs<<"class LoadImageAndSWCPlugin : public QObject, public VISIOCYTEPluginInterface2_1"<<endl;
	ofs<<"{"<<endl;
	ofs<<"	Q_OBJECT"<<endl;
	ofs<<"	Q_INTERFACES(VISIOCYTEPluginInterface2_1);"<<endl;
	ofs<<""<<endl;
	ofs<<"public:"<<endl;
	ofs<<"	float getPluginVersion() const {return 1.1f;}"<<endl;
	ofs<<""<<endl;
	ofs<<"	QStringList menulist() const;"<<endl;
	ofs<<"	void domenu(const QString &menu_name, VISIOCYTEPluginCallback2 &callback, QWidget *parent);"<<endl;
	ofs<<""<<endl;
	ofs<<"	QStringList funclist() const ;"<<endl;
	ofs<<"	bool dofunc(const QString &func_name, const VISIOCYTEPluginArgList &input, VISIOCYTEPluginArgList &output, VISIOCYTEPluginCallback2 &callback, QWidget *parent);"<<endl;
	ofs<<"};"<<endl;
	ofs<<""<<endl;
	ofs<<"#endif"<<endl;
	ofs<<""<<endl;
	ofs.close();
}
